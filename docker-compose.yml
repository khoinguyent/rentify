# Rentify Docker Compose
# 
# Make sure to copy env.example to .env and configure the storage provider settings:
# cp env.example .env
#
# Storage providers supported: minio (default), s3, r2

services:
  postgres:
    image: postgres:16-alpine
    container_name: rentify-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rentify
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runtime
    container_name: rentify-api
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/rentify?schema=public
      API_PORT: 3001
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-7d}
      CORS_ORIGIN: http://localhost:3000
      # Storage Provider Configuration
      STORAGE_PROVIDER: ${STORAGE_PROVIDER:-minio}
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: ${MINIO_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-rentify-files}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_PUBLIC_URL: http://localhost:9000
      # Redis Cache
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_TTL_SECONDS: 120
      # AWS S3 Configuration
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-}
      AWS_S3_PUBLIC_URL: ${AWS_S3_PUBLIC_URL:-}
      # Cloudflare R2 Configuration
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:-}
      CLOUDFLARE_R2_ACCESS_KEY_ID: ${CLOUDFLARE_R2_ACCESS_KEY_ID:-}
      CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${CLOUDFLARE_R2_SECRET_ACCESS_KEY:-}
      CLOUDFLARE_R2_BUCKET: ${CLOUDFLARE_R2_BUCKET:-}
      CLOUDFLARE_R2_PUBLIC_URL: ${CLOUDFLARE_R2_PUBLIC_URL:-}
      NODE_ENV: development
    extra_hosts:
      - "localhost:host-gateway"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: rentify-web
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/rentify?schema=public
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-nextauth-secret-change-in-production}
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_GOOGLE_MAPS_KEY: ${NEXT_PUBLIC_GOOGLE_MAPS_KEY:-}
      API_BASE_URL: http://rentify-api:3001/api
      JWT_SECRET: ${JWT_SECRET:-fzObFmMc5mVog/yvQzauTNmOekYb3/1JKktnZDo1sX+F5Kr0j2WhVaHgZh23jiGbF41OSCEQinUN6Ujq6xbX8g==}
      NODE_ENV: development
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    depends_on:
      postgres:
        condition: service_healthy
    command: pnpm --filter @rentify/web dev

  redis:
    image: redis:7-alpine
    container_name: rentify-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: ["redis-server", "--appendonly", "yes"]

  minio:
    image: minio/minio:latest
    container_name: rentify-minio
    restart: unless-stopped
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001" --address ":9000"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  minio_data:

